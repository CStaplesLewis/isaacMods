<shaders>
	<shader name="TiltShift">
		<vertex><![CDATA[
			attribute vec3 Position;										
			attribute vec4 Color;											
			attribute vec2 TexCoord;										
			attribute vec2 ScreenSize;										
			attribute vec2 TextureSize;									
			attribute float Scale;
			attribute float Time;
			varying vec4 Color0;											
			varying vec2 TexCoord0;										
			varying vec2 ScreenSizeOut;										
			varying vec2 TextureSizeOut;	
			varying float ScaleOut;
			varying float TimeOut;
			uniform mat4 Transform;										
																			
			void main(void)												
			{																
				ScreenSizeOut = ScreenSize;									
				TextureSizeOut = TextureSize;								
				ScaleOut = Scale;			
				TimeOut = Time;
				Color0 = Color;												
				TexCoord0 = TexCoord;
				gl_Position = Transform * vec4(Position.xyz, 1.0);			
			}
		]]></vertex>
		<fragment><![CDATA[
			varying lowp vec4 Color0;										
			varying mediump vec2 TexCoord0;								
			varying lowp vec2 ScreenSizeOut;									
			varying lowp vec2 TextureSizeOut;	
			varying lowp float ScaleOut;			
			varying mediump float TimeOut;
			uniform sampler2D Texture0;											
			
			// How quickly does the center of focus oscillate up and down
			float AnimationFrequency = 		0.0100;
			const float BlurStrength = 		0.0150;
			const float MaxBlurRadius = 	0.3000;

			// Increase this value to improve blur quality. Go no higher than 28, the number of values in the DiscKernel.
			const int DiscKernelSamples = 	28;

			const vec2 DiscKernel[] =
			{
				vec2(0.62463,0.54337),
				vec2(-0.13414,-0.94488),
				vec2(0.38772,-0.43475),
				vec2(0.12126,-0.19282),
				vec2(-0.20388,0.11133),
				vec2(0.83114,-0.29218),
				vec2(0.10759,-0.57839),
				vec2(0.28285,0.79036),
				vec2(-0.36622,0.39516),
				vec2(0.75591,0.21916),
				vec2(-0.52610,0.02386),
				vec2(-0.88216,-0.24471),
				vec2(-0.48888,-0.29330),
				vec2(0.44014,-0.08558),
				vec2(0.21179,0.51373),
				vec2(0.05483,0.95701),
				vec2(-0.59001,-0.70509),
				vec2(-0.80065,0.24631),
				vec2(-0.19424,-0.18402),
				vec2(-0.43667,0.76751),
				vec2(0.21666,0.11602),
				vec2(0.15696,-0.85600),
				vec2(-0.75821,0.58363),
				vec2(0.99284,-0.02904),
				vec2(-0.22234,-0.57907),
				vec2(0.55052,-0.66984),
				vec2(0.46431,0.28115),
				vec2(-0.07214,0.60554)
			};
								
			void main(void)												
			{																 
				vec4 sum = vec4(0, 0, 0, 0);
				float aspect = TextureSizeOut.x / TextureSizeOut.y;

				// Vertical ratio is needed because the screen size (like 1280x720) is usually smaller than the power-of-two texture size (like 2048x1024)
				float verticalRatio = TexCoord0.y * (TextureSizeOut.y/ScreenSizeOut.y);

				float radius = verticalRatio - (sin(TimeOut*AnimationFrequency)*.15 + 0.5);
				radius = min(abs(radius), MaxBlurRadius);

				// Just for testing: it is hard to tell what's going on with just the blur, so I add a color offset to help tell where the sharp band is.
				//sum += abs(vec4(radius, radius, radius, 0)*30);

				for(int l=0; l<DiscKernelSamples; l++)
				{
					vec2 disc = vec2(DiscKernel[l].x*aspect, DiscKernel[l].y) * BlurStrength;
					disc *= radius;

					vec2 sampleUV = TexCoord0 + disc;
					vec4 sample = texture2D(Texture0, sampleUV.xy);
					if (sample.r+sample.g+sample.b > 2.95) {
						// Do a bit of fake HDR to make the highlights pop out a bit as bright bokeh
						sample*= 2.0;
					}
					sum += sample;
				}
 				
				gl_FragColor = Color0 * ( sum / (float)DiscKernelSamples );
			}
		]]></fragment>
	</shader>
</shaders>